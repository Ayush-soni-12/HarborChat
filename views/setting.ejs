
    <%- include('partials/header') %>





    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HarborChat - Settings</title>
    <link rel="stylesheet" href="/css/setting.css">
   
</head>
<body>
    <div class="settings-container">
        <div class="settings-sidebar">
            <div class="settings-header">
                <button class="back-button" id="backButton"><i class="fas fa-arrow-left"></i></button>
                <h1>Settings</h1>
            </div>
            
            <div class="settings-nav">
                <div class="settings-nav-item" data-section="profile">
                    <i class="fas fa-user"></i>
                    <span>Profile</span>
                </div>
                <div class="settings-nav-item" data-section="account">
                    <i class="fas fa-cog"></i>
                    <span>Account</span>
                </div>
                <div class="settings-nav-item" data-section="privacy">
                    <i class="fas fa-lock"></i>
                    <span>Privacy</span>
                </div>
                <div class="settings-nav-item" data-section="chat">
                    <i class="fas fa-comment"></i>
                    <span>Chat</span>
                </div>
                <div class="settings-nav-item" data-section="notifications">
                    <i class="fas fa-bell"></i>
                    <span>Notifications</span>
                </div>
                <div class="settings-nav-item" data-section="keyboard">
                    <i class="fas fa-keyboard"></i>
                    <span>Shortcuts</span>
                </div>
                <div class="settings-nav-item" data-section="logout">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </div>
            </div>
        </div>
        
        <!-- <div class="settings-content-container"> -->
        

            <!-- Content Sections -->
 <form id="profile-form" enctype="multipart/form-data"  action="/update-profile?_method=PATCH" method="POST">
  <div class="settings-content" id="profile-section">
    
    <div class="profile-info">
      <img src="<%= userDetail.image ? userDetail.image : 'https://via.placeholder.com/80' %>" alt="Profile Picture" class="profile-avatar">
      <div class="profile-details">
        <h3><%= userDetail.name %></h3>
        <p><%= userDetail.email %></p>
        <p class="online-status">Online</p>
      </div>
    </div>

    <div class="setting-item">
      <div class="setting-title">Profile</div>
      <div class="setting-description">Upload a new profile picture</div>
      <input type="file" name="image" id="image" accept="image/*">
    </div>

    <div class="setting-item">
      <div class="setting-title">Display Name</div>
      <div class="setting-description">Change your name</div>
      <input type="text" name="name" id="name" value="<%= userDetail.name %>" style="width: 100%; max-width: 300px;">
    </div>

    <div class="setting-item">
      <div class="setting-title">About</div>
      <div class="setting-description">Tell others about yourself</div>
      <textarea name="about" style="width: 100%; max-width: 500px; height: 100px;"><%=userDetail.about %>.</textarea>

      <button class="btn btn-primary" type="submit" style="margin-top: 10px;">Save Changes</button>
    </div>
    
  </div>
</form>


            <!-- Other content sections (Account, Privacy, Chat, etc.) would go here -->
            <!-- They follow the same pattern as the profile section -->
        <!-- </div> -->
   

        <!-- acccount content -->

         <div class="settings-content" id="account-section">
                <form id="profile-form"  action="/update-email?_method=PATCH"   method="POST">
                <div class="setting-item">
                    <div class="setting-title">Email Address</div>
                    <div class="setting-description">Your current email address is <%=userDetail.email %></div>
                    <input type="email" name="email" id="email" required>
                    <button class="btn btn-primary">Change Email</button>
                </div>
                </form>
           
               <div class="setting-item">
    <div class="setting-title">Password</div>
    <div class="setting-description">Last changed 3 months ago</div>
    <button class="btn btn-primary" id="changePasswordBtn">Change Password</button>
    
    <!-- Password Change Form (initially hidden) -->
    <div class="password-form" id="passwordForm" style="display: none;">
        <form action="/auth/changePassword?_method=PATCH" method="POST">
            <div class="form-group">
               <div class="form-group" style="position: relative;">
                <label for="currentPassword">Current Password</label>
                 <input type="password" name="currentPassword" class="form-control" id="currentPassword" placeholder="Enter the current password" readonly  onfocus="this.removeAttribute('readonly')">
                 <i class="toggle-password fas fa-eye" style="position: absolute; right: 10px; top: 35px; cursor: pointer;"></i>
              </div>
            </div>
             <div class="form-group" style="position: relative;">
                <label for="newPassword">New Password</label>
                <input type="password" name="newPassword" class="form-control" id="newPassword" required>
                <i class="toggle-newpassword fas fa-eye" style="position: absolute; right: 10px; top: 35px; cursor: pointer;"></i>
            </div>
             <div class="form-group" style="position: relative;">
                <label for="confirmPassword">Confirm New Password</label>
                <input type="password"  name="confirmPassword"  class="form-control" id="confirmPassword" required>
                <i class="toggle-confirmpassword fas fa-eye" style="position: absolute; right: 10px; top: 35px; cursor: pointer;"></i>
            </div>
            <button type="submit" class="btn btn-success">Save Changes</button>
            <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
        </form>
    </div>
</div>



                







    <div class="setting-item">
    <div class="setting-title">Two-Step Verification</div>
    <div class="setting-description">Add an extra layer of security to your account</div>
    <label class="toggle-switch">
        <input type="checkbox" id="twoStepToggle"  <%= userDetail.isPin ? 'checked' : '' %>>
        <span class="toggle-slider"></span>
    </label>
    <span style="margin-left: 10px;" id="toggleStatus"><%= userDetail.isPin ? 'Enabled' : 'Disabled' %></span>
</div>

<div class="PIN" id="pinForm" style="display: none;">
    <form action="/auth/changePin" method="POST" class="formPin">
        <div class="form-group" style="position: relative;">
            <label for="setPin">Set Pin</label>
            <input type="password" name="pin" class="form-control" id="setPin" required readonly onfocus="this.removeAttribute('readonly')">
            <i class="toggle-setPin fas fa-eye" style="position: absolute; right: 10px; top: 35px; cursor: pointer;"></i>
        </div>
        <button type="submit" class="btn btn-success" id="savePin">Save Changes</button>
        <button type="button" class="btn btn-secondary" id="cancelpinBtn">Cancel</button>
    </form>
</div>




                <div class="setting-item">
                    <div class="setting-title">Delete Account</div>
                    <div class="setting-description">Permanently delete your account and all data</div>
                    <button class="btn btn-danger" id="deleteAccountBtn">Delete Account</button>
                </div>
            </div>



              <!--  Delete modal -->
            <div class="alert-modal" id="deleteConfirmationModal">
    <div class="alert-modal-content">
        <div class="alert-modal-header">
            <h3>Confirm Account Deletion</h3>
            <span class="close-btn">&times;</span>
        </div>
        <div class="alert-modal-body">
            <div class="alert-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
                </svg>
            </div>
            <p>This action <strong>cannot</strong> be undone. This will permanently delete:</p>
            <ul>
                <li>Your profile</li>
                <li>All your data</li>
                <li>Any associated content</li>
            </ul>
            <div class="alert-actions">
                <button class="cancel-btn">Cancel</button>
                <button class="confirm-delete-btn" id="confirmDeleteBtn">Delete Account</button>
            </div>
        </div>
    </div>
</div>


            <!-- privacy content -->


            <div class="settings-content" id="privacy-section">
                <div class="setting-item">
                    <div class="setting-title">Last Seen & Online</div>
                    <div class="setting-description">Control who can see when you're online and your last seen time</div>
                    <select style="width: 100%; max-width: 300px;">
                        <option>Everyone</option>
                        <option selected>My Contacts</option>
                        <option>Nobody</option>
                    </select>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Profile Photo</div>
                    <div class="setting-description">Control who can see your profile photo</div>
                    <select style="width: 100%; max-width: 300px;">
                        <option>Everyone</option>
                        <option selected>My Contacts</option>
                        <option>Nobody</option>
                    </select>
                </div>

                <div class="setting-item">
                    <div class="setting-title">About</div>
                    <div class="setting-description">Control who can see your about info</div>
                    <select style="width: 100%; max-width: 300px;">
                        <option>Everyone</option>
                        <option selected>My Contacts</option>
                        <option>Nobody</option>
                    </select>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Read Receipts</div>
                    <div class="setting-description">Let others know when you've read their messages</div>
                    <label class="toggle-switch">
                        <input type="checkbox" checked>
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Enabled</span>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Blocked Contacts</div>
                    <div class="setting-description">Manage contacts you've blocked</div>
                    <button class="btn btn-primary">Manage Blocked Contacts</button>
                </div>
            </div>



            <!--  chat section  -->
           
            <div class="settings-content" id="chat-section">
                <div class="setting-item">
                    <div class="setting-title">Chat Backup</div>
                    <div class="setting-description">Automatically back up your chats to Google Drive</div>
                    <button class="btn btn-primary">Back Up Now</button>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Enter Key Behavior</div>
                    <div class="setting-description">Choose what the Enter key does</div>
                    <select style="width: 100%; max-width: 300px;">
                        <option selected>Sends the message</option>
                        <option>Adds a new line</option>
                    </select>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Media Visibility</div>
                    <div class="setting-description">Show newly downloaded media in your phone's gallery</div>
                    <label class="toggle-switch">
                        <input type="checkbox">
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Disabled</span>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Wallpaper</div>
                    <div class="setting-description">Change the background of your chats</div>
                    <button class="btn btn-primary">Change Wallpaper</button>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Font Size</div>
                    <div class="setting-description">Adjust the text size in your chats</div>
                    <select style="width: 100%; max-width: 300px;">
                        <option>Small</option>
                        <option selected>Medium</option>
                        <option>Large</option>
                    </select>
                </div>
            </div>



              <!-- Notifications Section -->
            <div class="settings-content" id="notifications-section">
                <div class="setting-item">
                    <div class="setting-title">Message Notifications</div>
                    <div class="setting-description">Show notifications for new messages</div>
                    <label class="toggle-switch">
                        <input type="checkbox" checked>
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Enabled</span>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Notification Tone</div>
                    <div class="setting-description">Select a sound for new messages</div>
                    <select style="width: 100%; max-width: 300px;">
                        <option selected>Default (HarborChat)</option>
                        <option>Chime</option>
                        <option>Note</option>
                        <option>Pop</option>
                    </select>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Vibrate</div>
                    <div class="setting-description">Vibrate for new messages</div>
                    <label class="toggle-switch">
                        <input type="checkbox" checked>
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Enabled</span>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Popup Notifications</div>
                    <div class="setting-description">Show brief popup when screen is on</div>
                    <label class="toggle-switch">
                        <input type="checkbox">
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Disabled</span>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Light</div>
                    <div class="setting-description">Flash light for new messages</div>
                    <label class="toggle-switch">
                        <input type="checkbox">
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Disabled</span>
                </div>
            </div>

            <!-- Keyboard Shortcuts Section -->
            <div class="settings-content" id="keyboard-section">
                <div class="setting-item">
                    <div class="setting-title">Keyboard Shortcuts</div>
                    <div class="setting-description">Enable keyboard shortcuts for faster navigation</div>
                    <label class="toggle-switch">
                        <input type="checkbox" checked>
                        <span class="toggle-slider"></span>
                    </label>
                    <span style="margin-left: 10px;">Enabled</span>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Available Shortcuts</div>
                    <div class="setting-description">List of all keyboard shortcuts</div>
                    
                    <div style="margin-top: 15px;">
                        <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid var(--border-color);">
                            <span>New chat</span>
                            <span><span class="shortcut-key">Ctrl</span> + <span class="shortcut-key">N</span></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid var(--border-color);">
                            <span>Search</span>
                            <span><span class="shortcut-key">Ctrl</span> + <span class="shortcut-key">K</span></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid var(--border-color);">
                            <span>Send message</span>
                            <span><span class="shortcut-key">Enter</span></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid var(--border-color);">
                            <span>New line</span>
                            <span><span class="shortcut-key">Shift</span> + <span class="shortcut-key">Enter</span></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid var(--border-color);">
                            <span>Settings</span>
                            <span><span class="shortcut-key">Ctrl</span> + <span class="shortcut-key">,</span></span>
                        </div>
                        <div style="display: flex; justify-content: space-between; padding: 8px 0;">
                            <span>Emoji picker</span>
                            <span><span class="shortcut-key">Ctrl</span> + <span class="shortcut-key">E</span></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Logout Section -->
            <div class="settings-content" id="logout-section">
                <div class="setting-item">
                    <div class="setting-title">Log Out</div>
                    <div class="setting-description">Sign out of your account on this device</div>
                    <button class="btn btn-primary">Log Out</button>
                </div>

                <div class="setting-item">
                    <div class="setting-title">Log Out From All Devices</div>
                    <div class="setting-description">Sign out of your account on all devices</div>
                    <button class="btn btn-primary">Log Out Everywhere</button>
                </div>
            </div>
  
            <!-- </div> -->



    </div>





         </div>


          <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>

   <script>
    document.addEventListener('DOMContentLoaded', function() {
      const navItems = document.querySelectorAll('.settings-nav-item');
      const contentSections = document.querySelectorAll('.settings-content');
      const defaultMessage = document.getElementById('defaultMessage');
      const backButton = document.getElementById('backButton');
      const settingsHeader = document.querySelector('.settings-header h1');
      const changePasswordBtn = document.getElementById('changePasswordBtn');
      const passwordForm = document.getElementById('passwordForm');
      const toggle = document.getElementById('twoStepToggle');
      const toggleStatus = document.getElementById('toggleStatus');
      const pinForm = document.getElementById('pinForm');
      const cancelpinBtn = document.getElementById('cancelpinBtn');
      const cancelBtn = document.getElementById('cancelBtn');
      const deleteBtn = document.getElementById('deleteAccountBtn');
      const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
      const modal = document.getElementById('deleteConfirmationModal');
      const closeBtn = document.querySelector('.close-btn');
      const canceldeletebtn = document.querySelector('.cancel-btn');

             
    document.querySelector('.toggle-password').addEventListener('click', function() {
    const passwordInput = document.getElementById('currentPassword');
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        this.classList.replace('fa-eye', 'fa-eye-slash');
    } else {
        passwordInput.type = 'password';
        this.classList.replace('fa-eye-slash', 'fa-eye');
    }
});


    document.querySelector('.toggle-newpassword').addEventListener('click', function() {
    const passwordInput = document.getElementById('newPassword');
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        this.classList.replace('fa-eye', 'fa-eye-slash');
    } else {
        passwordInput.type = 'password';
        this.classList.replace('fa-eye-slash', 'fa-eye');
    }
});


    document.querySelector('.toggle-confirmpassword').addEventListener('click', function() {
    const passwordInput = document.getElementById('confirmPassword');
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        this.classList.replace('fa-eye', 'fa-eye-slash');
    } else {
        passwordInput.type = 'password';
        this.classList.replace('fa-eye-slash', 'fa-eye');
    }
});


      document.querySelector('.toggle-setPin').addEventListener('click', function() {
    const passwordInput = document.getElementById('setPin');
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        this.classList.replace('fa-eye', 'fa-eye-slash');
    } else {
        passwordInput.type = 'password';
        this.classList.replace('fa-eye-slash', 'fa-eye');
    }
});




        //  let isPin = false;
          toggle.addEventListener('change',async function() {

             const isEnabled = this.checked;

            if (isEnabled) {
                toggleStatus.textContent = 'Enabled';
                pinForm.style.display = 'block';
                // isPin =true
                // console.log(isPin)
        document.querySelector('.formPin').addEventListener('submit',async function (e) {
            e.preventDefault()
              const pin = document.getElementById("setPin").value.trim();
            //   console.log(pin)
            //   console.log(isPin);
               await fetch('/auth/changePin',{
                    method:'POST',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isPin:isEnabled,pin})
                })
        });

               

                

            } else {
                toggleStatus.textContent = 'Disabled';
                pinForm.style.display = 'none';
                console.log(isEnabled)
                // isPin = false
                //    console.log(isPin)
                    await fetch('/auth/changePin',{
                    method:'POST',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isPin:isEnabled,pin:'null'})
                })
            }
         
              // Handle cancel button click
        cancelpinBtn.addEventListener('click',async function() {
            toggle.checked = false;
            toggleStatus.textContent = 'Disabled';
            pinForm.style.display = 'none';
            // isPin = false
            //    console.log(isPin)
                await fetch('/auth/changePin',{
                    method:'POST',
                    headers:{
                        'Content-Type': 'application/json'
                    },
                    body:JSON.stringify({isPin:isEnabled,pin:'null'})
                })
        });

         document.querySelector('#savePin').addEventListener('click',function(e){
            toggle.checked = true;
            toggleStatus.textContent = 'Enabled';
            pinForm.style.display = 'none';
        })

       
  })

            


        // Toggle form visibility when button is clicked
    changePasswordBtn.addEventListener('click', function() {
        passwordForm.style.display = passwordForm.style.display === 'none' ? 'block' : 'none';
    });
    
    // Hide form when cancel button is clicked
    cancelBtn.addEventListener('click', function() {
        passwordForm.style.display = 'none';
    });
    
    



    deleteBtn.addEventListener('click', function() {
        modal.style.display = 'flex';
    });

      function closeModal() {
        modal.style.display = 'none';
    }

    closeBtn.addEventListener('click', closeModal);
    canceldeletebtn.addEventListener('click', closeModal);

    confirmDeleteBtn.addEventListener('click',async function() {

        closeModal();
        // alert('Account deletion would be processed here');
        const response = await fetch ('/auth/deleteAccount',{
          method: 'DELETE',        
        })
         const result = await response.json();
                if (result.redirect) {
                 window.location.href = result.redirect; // redirect to pin page
               }
        
    });


        // Close modal when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            closeModal();
        }
    });

     








        let currentContent = null;
        
        // Initialize GSAP animations
        gsap.set('.settings-content', { x: '100%', opacity: 0 });
        
        navItems.forEach(item => {
            item.addEventListener('click', function() {
                const sectionId = this.getAttribute('data-section') + '-section';
                const contentSection = document.getElementById(sectionId);
                const sectionTitle = this.querySelector('span').textContent;
                
                // Don't do anything if clicking the already active item
                // if (this.classList.contains('active')) return;
                
                // Update header
                settingsHeader.textContent = sectionTitle;
                backButton.style.display = 'block';
                
                // Create animation timeline
                const tl = gsap.timeline();
                
                // If there's currently shown content, hide it first
                if (currentContent) {
                    tl.to(currentContent, {
                        x: '100%',
                        opacity: 0,
                        duration: 0.2,
                        ease: "power2.in",
                        onComplete: () => {
                            currentContent.style.display = 'none';
                        }
                    });
                } else {
                    // Hide default message if this is the first selection
                    tl.to(defaultMessage, { 
                        opacity: 0,
                        duration: 0.2,
                        onComplete: () => {
                            defaultMessage.style.display = 'none';
                        }
                    });
                }
                
                // Show new content section
                tl.to(contentSection, {
                    x: 0,
                    opacity: 1,
                    duration: 0.3,
                    ease: "power2.out",
                    onStart: () => {
                        contentSection.style.display = 'block';
                        document.querySelector('.settings-content-container').scrollTo(0, 0);
                    }
                });
                
                // Update current content reference
                currentContent = contentSection;
                
                // Update active nav item
                navItems.forEach(navItem => navItem.classList.remove('active'));
                this.classList.add('active');
            });
        });
        
        backButton.addEventListener('click', function() {
            if (!currentContent) return;
            
            // Update header
            settingsHeader.textContent = 'Settings';
            backButton.style.display = 'none';
            
            // Hide current content section with animation
            gsap.to(currentContent, {
                x: '100%',
                opacity: 0,
                duration: 0.3,
                ease: "power2.in",
                onComplete: () => {
                    currentContent.style.display = 'none';
                    currentContent = null;
                }
            });
            
            // Show default message
            defaultMessage.style.display = 'block';
            gsap.fromTo(defaultMessage, 
                { opacity: 0 }, 
                { opacity: 1, duration: 0.3 }
            );
            
            // Remove active class from nav items
            navItems.forEach(navItem => navItem.classList.remove('active'));
            
            // Scroll to top when returning to options
            document.querySelector('.settings-sidebar').scrollTo(0, 0);
        });
    });
</script>
</body>
</html>
    

   


    <%- include('partials/footer') %>
