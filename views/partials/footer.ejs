<!-- Chat Area -->
    <div class="chat-area" id="chatArea">
        <div class="empty-chat">
            <div class="empty-chat-icon">
                <i class="fas fa-comment-dots"></i>
            </div>
            <h2>HarborChat Web</h2>
            <p>Select a chat to start messaging</p>
        </div>

 <!--  personal chat  -->
        <!-- ...existing code... -->
         <div class="chattingArea">
<div class="chat">
    <div class="nav">
        <div class="info">

                <div class="nav-item">
                    <div class="nav-avatar"></div>
                    <div class="nav-info">
                        <div class="nav-name" id="chatName"></div>
                          <span class="user-status">Offline</span> 
                    </div>
                </div>

        </div>
        <div class="dotIcon">
            <span>
  <div class="dropdown" style="display: inline-block;">
  <!-- <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false"> -->
     <i class="fas fa-ellipsis-v" data-bs-toggle="dropdown"aria-expanded="false"></i>
  <!-- </button> -->
  <ul class="dropdown-menu dropdown-menu-white iconImage" aria-labelledby="dropdownMenuButton2">
    <li class="userinfo"><a class="dropdown-item"><i class="fas fa-user-plus"></i> Contact info</a></li>
    <li><a class="dropdown-item" href="#"><i class="fa-regular fa-star"></i> Selected Messages</a></li>
    <li><a class="dropdown-item" href="#"><i class="fa-solid fa-bell-slash"></i>  Mute notifications</a></li>
    <li><a class="dropdown-item" href="#"><i class="fa-regular fa-square-check"></i>  Disappearing messages</a></li>
    <li><a class="dropdown-item" href="#"><i class="fa-regular fa-circle-xmark"></i>  Close Chat</a></li>
    <li><hr class="dropdown-divider"></li>
    <li><a class="dropdown-item danger" href="#"><i class="fa-regular fa-thumbs-down"></i>  Report</a></li>
    <li><a class="dropdown-item danger" href="#"><i class="fa-regular fa-circle-xmark"></i>  Block</a></li>
    <li><a class="dropdown-item danger" href="#"><i class="fa-solid fa-circle-minus"></i>  Clear chat</a></li>
     <li><a class="dropdown-item danger" href="#"><i class="fa-solid fa-trash"></i>  Delete chat</a></li>
  
  </ul>
</div>
            </span>
            <span>
                <i class="fa-solid fa-magnifying-glass"></i>
            </span>
        </div>
    </div>
<div id="loader" style="display:block; padding: 10px; text-align:center;width: 100%;">
  <div class="spinner"></div>
</div>

             <div class="messages-container" id="messagesContainer">
            <!-- Messages will be inserted here -->
        </div>

    <!-- WhatsApp-like type bar -->
<div class="type-bar">
  <button class="icon-btn"><i class="far fa-smile" id="emoji-button"></i></button>
  <emoji-picker id="emoji-picker"></emoji-picker>

  <input type="text" class="type-input message-input" placeholder="Type a message" id="textMessage" />

  <!-- File input -->
  <input type="file" id="imageInput" accept="image/*" multiple style="display: none;" />
  <span id="fileName" style="margin-left:10px; font-size:0.9em; color:#888;"></span>

  <button type="button" id="paperclip-btn" class="icon-btn"><i class="fas fa-paperclip"></i></button>
  <button class="icon-btn send-btn send-button"><i class="fas fa-paper-plane"></i></button>
</div>

</div>
<!-- <div class="user-info">Hello world</div> -->


</div>



    </div>


    <!-- Add Contact Modal -->
    <div class="modal fade" id="addContactModal" tabindex="-1" aria-labelledby="addContactModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <form id="addContactForm" class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addContactModalLabel">Add New Contact</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="contactName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="contactName" required>
                    </div>
                    <div class="mb-3">
                        <label for="contactPhone" class="form-label">Phone Number</label>
                        <input type="tel" name="phone" id="contactPhone" class="form-control" required pattern="^[0-9]{10}$">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Contact</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast-notification" id="toastNotification"></div>

    <!-- Hidden image crop modal -->
<div id="imageEditModal" class="modal">
  <div class="edit-modal-content">
    <div class="modal-header">
      <h3>Edit Image</h3>
    </div>
    <div class="modal-body">
      <img id="imageToEdit" class="image-preview"/>
      <input type="text" id="imageCaption" class="caption-input" placeholder="Write a caption (optional)"/>
      <canvas id="fabricCanvas" width="400" height="300"></canvas>
      <div id="fabricControls" class="drawing-controls">
        <label class="control-label">
          <span>üñçÔ∏è Color:</span>
          <input type="color" id="fabricColor" value="#ff0000" />
        </label>
        <label class="control-label">
          <span>‚úèÔ∏è Size:</span>
          <input type="range" id="fabricBrushSize" min="1" max="20" value="5" />
        </label>
        <button id="fabricClear" class="clear-button">üßΩ Clear</button>
      </div>
    </div>
    <div class="modal-footer button-group">
      <div class="left-buttons">
        <button id="drawButton" class="draw-btn">‚úçÔ∏è Draw</button>
      </div>
      <div class="right-buttons">
        <button id="cancelEdit" class="cancel-btn">Cancel</button>
        <button id="cropButton" class="crop-btn">Crop & Send</button>
      </div>
    </div>
  </div>
</div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>



    <script type="module" src="/js/footer.js"></script>

    <script>
/**
 * HarborChat Footer Script
 * -----------------------
 * Handles add contact modal, toast notifications, and emoji picker logic.
 * All functions are grouped and commented for clarity.
 */

// // --- ADD CONTACT FORM SUBMISSION ---
// document.getElementById("addContactForm").addEventListener("submit", async function(e) {
//     e.preventDefault();
//     const name = document.getElementById("contactName").value.trim();
//     const phone = document.getElementById("contactPhone").value.trim();
//     try {
//         const res = await fetch("/contacts/ajax/add", {
//             method: "POST",
//             headers: { "Content-Type": "application/json" },
//             body: JSON.stringify({ name, phone })
//         });
//         const result = await res.json();
//         if (res.ok) {
//             const contactList = document.getElementById('contactList');
//             const emptyState = document.getElementById('emptyChatMsg');
//             if (emptyState) emptyState.style.display = 'none';
//             const userId = result.contactId;
//             const newContact = document.createElement('div');
//             newContact.className = 'contact-item';
//             newContact.dataset.userid = userId;
//             newContact.innerHTML = `
//                 <div class="contact-avatar">${name.charAt(0)}</div>
//                 <div class="contact-info">
//                     <div class="contact-name">${name}</div>
//                     <div class="contact-last-msg">${phone}</div>
//                 </div>
//             `;
//             // Add click event to open chat
//             newContact.addEventListener('click', async function () {
//                 document.querySelector('.nav-name').textContent = name;
//                 document.querySelector('.nav-avatar').textContent = name.charAt(0);
//                 window.currentReceiverId = userId;
//                 document.querySelector('.empty-chat').style.display = 'none';
//                 document.querySelector('.chattingArea').style.display = 'block';
//                 document.getElementById('sidebar').classList.add('active');
//                 document.getElementById('chatArea').classList.add('active');
//                 await loadChatMessages();
//             });
//             contactList.appendChild(newContact);
//             updateEmptyChatMessage();
//             // Reset form and close modal
//             e.target.reset();
//             bootstrap.Modal.getInstance(document.getElementById('addContactModal')).hide();
//             // Show success notification
//             showToast('Contact added successfully');
//         } else {
//             alert(result.message || "Something went wrong.");
//         }
//     } catch (err) {
//         console.error(err);
//         alert("Failed to add contact.");
//     }
// });

// // --- TOAST NOTIFICATION ---
// function showToast(message) {
//     const toast = document.getElementById('toastNotification');
//     toast.textContent = message;
//     toast.classList.add('show');
//     setTimeout(() => {
//         toast.classList.remove('show');
//     }, 3000);
// }

// // --- EMOJI PICKER LOGIC ---
// const emojiButton = document.getElementById('emoji-button');
// const emojiPicker = document.getElementById('emoji-picker');
// const chatInput = document.querySelector('.message-input');
// // Toggle the emoji picker
// emojiButton.addEventListener('click', () => {
//     emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';
// });
// // Insert emoji into the textarea
// emojiPicker.addEventListener('emoji-click', (event) => {
//     const emoji = event.detail.unicode;
//     chatInput.value += emoji;
// });
// // Hide emoji picker when clicking outside
// document.addEventListener('click', (e) => {
//     if (!emojiPicker.contains(e.target) && e.target !== emojiButton) {
//         emojiPicker.style.display = 'none';
//     }
// });
    </script>


</body>
</html>